# =============================================================================
# KUBERNETES - MINIO DEPLOYMENT
# =============================================================================
# Deployment do MinIO (S3-compatible Object Storage)
# Data Lake para camadas Bronze, Silver e Gold
# =============================================================================

---
# =============================================================================
# SECRET - MinIO Credentials
# =============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: minio-secrets
  namespace: sptrans-pipeline
type: Opaque
stringData:
  root-user: "admin"
  root-password: "miniopassword123"

---
# =============================================================================
# PERSISTENT VOLUME CLAIM - MinIO Data
# =============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-data-pvc
  namespace: sptrans-pipeline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard

---
# =============================================================================
# STATEFULSET - MinIO
# =============================================================================

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: sptrans-pipeline
  labels:
    app: minio
spec:
  serviceName: minio-headless
  replicas: 1  # Para produção, considere usar MinIO Distributed (4+ nodes)
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      serviceAccountName: sptrans-service-account
      priorityClassName: sptrans-high-priority
      
      containers:
        - name: minio
          image: minio/minio:latest
          imagePullPolicy: IfNotPresent
          
          args:
            - server
            - /data
            - --console-address
            - ":9001"
          
          ports:
            - name: api
              containerPort: 9000
              protocol: TCP
            - name: console
              containerPort: 9001
              protocol: TCP
          
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: root-user
            
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: root-password
            
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            
            - name: MINIO_BROWSER
              value: "on"
          
          volumeMounts:
            - name: data
              mountPath: /data
          
          resources:
            requests:
              cpu: 1
              memory: 2Gi
            limits:
              cpu: 4
              memory: 8Gi
          
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
          
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
      
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio-data-pvc

---
# =============================================================================
# SERVICE - MinIO API (ClusterIP)
# =============================================================================

apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: sptrans-pipeline
  labels:
    app: minio
spec:
  type: ClusterIP
  selector:
    app: minio
  ports:
    - name: api
      port: 9000
      targetPort: 9000
      protocol: TCP

---
# =============================================================================
# SERVICE - MinIO Console (LoadBalancer)
# =============================================================================

apiVersion: v1
kind: Service
metadata:
  name: minio-console
  namespace: sptrans-pipeline
  labels:
    app: minio
spec:
  type: LoadBalancer
  selector:
    app: minio
  ports:
    - name: console
      port: 9001
      targetPort: 9001
      protocol: TCP

---
# =============================================================================
# SERVICE - MinIO Headless (para StatefulSet)
# =============================================================================

apiVersion: v1
kind: Service
metadata:
  name: minio-headless
  namespace: sptrans-pipeline
  labels:
    app: minio
spec:
  clusterIP: None
  selector:
    app: minio
  ports:
    - name: api
      port: 9000
      targetPort: 9000

---
# =============================================================================
# JOB - MinIO Bucket Setup
# =============================================================================

apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup-buckets
  namespace: sptrans-pipeline
spec:
  template:
    spec:
      restartPolicy: OnFailure
      
      containers:
        - name: mc
          image: minio/mc:latest
          command:
            - /bin/sh
            - -c
            - |
              # Aguardar MinIO estar pronto
              until mc alias set minio http://minio:9000 admin miniopassword123; do
                echo "Waiting for MinIO..."
                sleep 5
              done
              
              echo "MinIO is ready. Creating buckets..."
              
              # Criar bucket principal
              mc mb minio/sptrans-datalake --ignore-existing
              
              # Criar estrutura de diretórios (Bronze, Silver, Gold)
              mc mb minio/sptrans-datalake/bronze --ignore-existing
              mc mb minio/sptrans-datalake/silver --ignore-existing
              mc mb minio/sptrans-datalake/gold --ignore-existing
              
              # Configurar políticas de acesso (opcional)
              # mc anonymous set download minio/sptrans-datalake/bronze
              
              echo "✅ Buckets created successfully"
              
              # Listar buckets
              mc ls minio/
              mc ls minio/sptrans-datalake/

---
# =============================================================================
# POD DISRUPTION BUDGET
# =============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: minio-pdb
  namespace: sptrans-pipeline
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: minio

---
# =============================================================================
# INGRESS - MinIO Console
# =============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-ingress
  namespace: sptrans-pipeline
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  tls:
    - hosts:
        - minio.sptrans-pipeline.com
      secretName: minio-tls
  rules:
    - host: minio.sptrans-pipeline.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: minio-console
                port:
                  number: 9001

---
# =============================================================================
# INGRESS - MinIO API
# =============================================================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-api-ingress
  namespace: sptrans-pipeline
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  tls:
    - hosts:
        - s3.sptrans-pipeline.com
      secretName: minio-api-tls
  rules:
    - host: s3.sptrans-pipeline.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: minio
                port:
                  number: 9000

---
# =============================================================================
# SERVICEMONITOR - Prometheus (opcional)
# =============================================================================

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: minio-metrics
  namespace: sptrans-pipeline
spec:
  selector:
    matchLabels:
      app: minio
  endpoints:
    - port: api
      path: /minio/v2/metrics/cluster
      interval: 30s

# =============================================================================
# DISTRIBUTED MINIO SETUP (Produção - 4+ nodes)
# =============================================================================
# Para ambiente de produção, considere usar MinIO Distributed Mode
# 
# Exemplo de configuração distribuída (4 nodes):
# 
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: minio
# spec:
#   replicas: 4
#   template:
#     spec:
#       containers:
#         - name: minio
#           args:
#             - server
#             - http://minio-{0...3}.minio-headless.sptrans-pipeline.svc.cluster.local/data
#             - --console-address
#             - ":9001"
#
# Requer:
# - 4+ PVCs (um por pod)
# - Headless Service
# - DNS para resolução interna

# =============================================================================
# USAGE
# =============================================================================
#
# Aplicar:
#   kubectl apply -f minio-deployment.yaml
#
# Verificar:
#   kubectl get pods -n sptrans-pipeline -l app=minio
#   kubectl get svc -n sptrans-pipeline -l app=minio
#
# Logs:
#   kubectl logs -n sptrans-pipeline minio-0 -f
#
# Port-forward Console:
#   kubectl port-forward -n sptrans-pipeline svc/minio-console 9001:9001
#
# Port-forward API:
#   kubectl port-forward -n sptrans-pipeline svc/minio 9000:9000
#
# Acessar Console:
#   http://localhost:9001 (admin / miniopassword123)
#
# Configurar mc (MinIO Client) local:
#   mc alias set k8s-minio http://localhost:9000 admin miniopassword123
#   mc ls k8s-minio/
#
# =============================================================================
# END
# =============================================================================
