version: '3.8'

# ============================================================================
# SPTRANS PIPELINE - DOCKER COMPOSE
# ============================================================================
# Orquestração completa da infraestrutura
# ============================================================================

networks:
  sptrans-network:
    driver: bridge
    name: sptrans-network

volumes:
  postgres-data:
  minio-data:
  redis-data:
  prometheus-data:
  grafana-data:

services:

  # ==========================================================================
  # POSTGRESQL - Database
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: sptrans-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow123}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - sptrans-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================================================
  # REDIS - Cache & Message Broker
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: sptrans-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sptrans-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================================================
  # MINIO - S3-Compatible Object Storage (Data Lake)
  # ==========================================================================
  minio:
    image: minio/minio:latest
    container_name: sptrans-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniopassword123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - sptrans-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ==========================================================================
  # MINIO CLIENT - Setup inicial
  # ==========================================================================
  minio-setup:
    image: minio/mc:latest
    container_name: sptrans-minio-setup
    depends_on:
      - minio
    networks:
      - sptrans-network
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 admin miniopassword123;
      mc mb local/sptrans-datalake --ignore-existing;
      mc mb local/sptrans-datalake/bronze --ignore-existing;
      mc mb local/sptrans-datalake/silver --ignore-existing;
      mc mb local/sptrans-datalake/gold --ignore-existing;
      echo 'MinIO buckets created successfully';
      exit 0;
      "

  # ==========================================================================
  # SPARK MASTER
  # ==========================================================================
  spark-master:
    image: bitnami/spark:3.5
    container_name: sptrans-spark-master
    restart: unless-stopped
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8081
    ports:
      - "8081:8081"
      - "7077:7077"
    volumes:
      - ./config/spark:/opt/spark/conf
      - ./src:/app/src
      - ./dags:/app/dags
    networks:
      - sptrans-network

  # ==========================================================================
  # SPARK WORKER 1
  # ==========================================================================
  spark-worker-1:
    image: bitnami/spark:3.5
    container_name: sptrans-spark-worker-1
    restart: unless-stopped
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=4g
    volumes:
      - ./config/spark:/opt/spark/conf
      - ./src:/app/src
    networks:
      - sptrans-network

  # ==========================================================================
  # SPARK WORKER 2
  # ==========================================================================
  spark-worker-2:
    image: bitnami/spark:3.5
    container_name: sptrans-spark-worker-2
    restart: unless-stopped
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=4g
    volumes:
      - ./config/spark:/opt/spark/conf
      - ./src:/app/src
    networks:
      - sptrans-network

  # ==========================================================================
  # AIRFLOW WEBSERVER
  # ==========================================================================
  airflow-webserver:
    build:
      context: .
      dockerfile: infra/docker/airflow.Dockerfile
    container_name: sptrans-airflow-webserver
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
    networks:
      - sptrans-network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================================================
  # AIRFLOW SCHEDULER
  # ==========================================================================
  airflow-scheduler:
    build:
      context: .
      dockerfile: infra/docker/airflow.Dockerfile
    container_name: sptrans-airflow-scheduler
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
    networks:
      - sptrans-network
    command: scheduler

  # ==========================================================================
  # AIRFLOW INIT (Run once)
  # ==========================================================================
  airflow-init:
    build:
      context: .
      dockerfile: infra/docker/airflow.Dockerfile
    container_name: sptrans-airflow-init
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
    networks:
      - sptrans-network
    entrypoint: >
      /bin/bash -c "
      airflow db init &&
      airflow users create \
        --username admin \
        --firstname Admin \
        --lastname User \
        --role Admin \
        --email admin@sptrans.com \
        --password admin
      "

  # ==========================================================================
  # PROMETHEUS - Monitoring
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sptrans-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - sptrans-network

  # ==========================================================================
  # GRAFANA - Dashboards
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: sptrans-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - postgres
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./dashboards/grafana:/etc/grafana/provisioning/dashboards
    networks:
      - sptrans-network

  # ==========================================================================
  # SUPERSET - BI Dashboards
  # ==========================================================================
  superset:
    build:
      context: .
      dockerfile: infra/docker/superset.Dockerfile
    container_name: sptrans-superset
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      - DATABASE_DB=airflow
      - DATABASE_HOST=postgres
      - DATABASE_PASSWORD=airflow123
      - DATABASE_USER=airflow
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
    ports:
      - "8088:8088"
    networks:
      - sptrans-network
    command: >
      /bin/bash -c "
      superset db upgrade &&
      superset fab create-admin \
        --username admin \
        --firstname Superset \
        --lastname Admin \
        --email admin@superset.com \
        --password admin &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
      "

  # ==========================================================================
  # NODE EXPORTER - System Metrics
  # ==========================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sptrans-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - sptrans-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  # ==========================================================================
  # POSTGRES EXPORTER - Database Metrics
  # ==========================================================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: sptrans-postgres-exporter
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      DATA_SOURCE_NAME: "postgresql://airflow:airflow123@postgres:5432/airflow?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - sptrans-network

  # ==========================================================================
  # REDIS EXPORTER - Cache Metrics
  # ==========================================================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sptrans-redis-exporter
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_ADDR: redis:6379
    ports:
      - "9121:9121"
    networks:
      - sptrans-network

# ============================================================================
# END
# ============================================================================
